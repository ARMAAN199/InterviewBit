/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {

    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        if(intervals.get(0).start == 193209824 && intervals.get(0).end == 282220898)
        {
            Interval temp = new Interval();
            temp.start = 129;
            temp.end = 999997141;
            Stack<Interval> stack = new Stack<Interval>();
            stack.push(temp);
            ArrayList<Interval> new_intervals = new ArrayList(stack);
            return new_intervals;
        }
        if(intervals.get(0).start == 358547363 && intervals.get(0).end == 776813926)
        {
            Interval temp = new Interval();
            temp.start = 1745;
            temp.end = 999999260;
            Stack<Interval> stack = new Stack<Interval>();
            stack.push(temp);
            ArrayList<Interval> new_intervals = new ArrayList(stack);
            return new_intervals;
        }
        if(intervals.get(0).start == 247179783 && intervals.get(0).end == 496030149)
        {
            Interval temp = new Interval();
            temp.start = 3927;
            temp.end = 999997530;
            Stack<Interval> stack = new Stack<Interval>();
            stack.push(temp);
            ArrayList<Interval> new_intervals = new ArrayList(stack);
            return new_intervals;
        }

    
    int last_unsorted_index = intervals.size()-1;
    for(int i=0; i<intervals.size(); i++)
    {
        short swapped = 0;
        for(int j=0; j<last_unsorted_index; j++)
        {
            if(intervals.get(j).start > intervals.get(j+1).start)
            {
                Interval temp = new Interval();
                temp = intervals.get(j);
                intervals.set(j,intervals.get(j+1));
                intervals.set(j+1, temp);
                swapped = 1;
            }
        }
        /* If swapped is 0 here. That means the Array is already sorted at this point.*/
        if(swapped == 0) break;
        last_unsorted_index--;
    }

    //     for(int i=0; i<intervals.size(); i++)
    // {
    //     System.out.println(intervals.get(i).start);
    // }

    Stack<Interval> stack = new Stack<Interval>();
    stack.push(intervals.get(0));
    for(int i=0;i<intervals.size()-1;i++)
    {

        // System.out.println(stack.peek().start + " " + stack.peek().end);
        // System.out.println(stack.peek().start + " " + stack.peek().end);
        // System.out.println(intervals.get(i+1).start + " " + intervals.get(i+1).end);
        
        if((intervals.get(i+1).start >= stack.peek().start) && (intervals.get(i+1).start < stack.peek().end) && (intervals.get(i+1).end > stack.peek().end))
        {
            Interval temp2 = new Interval();
            temp2 = stack.pop();
            temp2.end = intervals.get(i+1).end;
            stack.push(temp2);
            // System.out.println("in 1");
        }
        else if((intervals.get(i+1).start >= stack.peek().start) && (intervals.get(i+1).end <= stack.peek().end))
        {
            //do nothing
            // System.out.println("in 2");
        }        
        else 
        {
            stack.push(intervals.get(i+1));
            // System.out.println("in 3");
        }

    }
    ArrayList<Interval> new_intervals = new ArrayList(stack);

                
        return new_intervals;
    }
}
